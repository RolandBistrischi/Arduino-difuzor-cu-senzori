#define SPEAKER_PIN 9
#include "SPI.h"
/*float v[]={0.00119018554687500,
0.00155639648437500,
0.00137329101562500,
0.000915527343750000,
0.000305175781250000,
0.000305175781250000,
9.15527343750000e-05,
0.00143432617187500,
0.00122070312500000,
0.00149536132812500,
0.00210571289062500,
0.00146484375000000,
0.00128173828125000,
0.00109863281250000,
0.00164794921875000,
0.00112915039062500,
0.00143432617187500,
0.00198364257812500,
0.00225830078125000,
0.00204467773437500,
0.00213623046875000,
0.00189208984375000,
0.00155639648437500,
0.00210571289062500,
0.00180053710937500,
0.00213623046875000,
0.00204467773437500,
0.00122070312500000,
0.000823974609375000,
0.00103759765625000,
0.000915527343750000,
0.000885009765625000,
0.000885009765625000,
0.000274658203125000,
0.000610351562500000,
0.000732421875000000,
0.000610351562500000,
0.000976562500000000,
0.000305175781250000,
0.000579833984375000,
0.000518798828125000,
0.00103759765625000,
0.000610351562500000,
0.00119018554687500,
0.000915527343750000,
-0.000244140625000000,
0.000671386718750000,
0.000244140625000000,
0.000274658203125000,
3.05175781250000e-05,
0.000579833984375000,
0.00119018554687500,
0.00115966796875000,
0.00106811523437500,
0.00161743164062500,
0.000976562500000000,
0.00106811523437500,
0.00122070312500000,
0.000701904296875000,
0.00106811523437500,
0.000640869140625000,
0.000823974609375000,
0.000732421875000000,
0.00137329101562500,
0.00195312500000000,
0.00204467773437500,
0.00143432617187500,
0.00143432617187500,
0.00170898437500000,
0.00149536132812500,
0.00173950195312500,
0.00161743164062500,
0.00122070312500000,
0.00106811523437500,
0.00152587890625000,
0.00201416015625000,
0.000701904296875000,
0.00106811523437500,
0.00103759765625000,
0.000946044921875000,
0.000701904296875000,
0.00106811523437500,
0.00128173828125000,
0.000885009765625000,
0.00128173828125000,
0.00164794921875000,
0.00146484375000000,
0.000946044921875000,
0.000915527343750000,
0.00173950195312500,
0.00125122070312500,
0.00115966796875000,
0.000701904296875000,
0.000732421875000000,
0.000701904296875000,
0.000488281250000000,
0.000366210937500000,
0.000640869140625000,
0.000762939453125000,
0.000274658203125000,
0.000762939453125000,
0.000549316406250000,
0.00115966796875000,
0.000579833984375000,
0.000396728515625000,
-0.000335693359375000,
-0.000701904296875000,
-0.000396728515625000,
-6.10351562500000e-05,
0,
0.000122070312500000,
0.000244140625000000,
0.000823974609375000,
0.000152587890625000,
-0.000244140625000000,
-0.000274658203125000,
-3.05175781250000e-05,
6.10351562500000e-05,
0.000305175781250000,
3.05175781250000e-05,
0.000274658203125000,
-0.000366210937500000,
-0.000732421875000000,
-0.000457763671875000,
-0.000335693359375000,
-6.10351562500000e-05,
-0.000396728515625000,
9.15527343750000e-05,
-0.000579833984375000,
-0.000305175781250000,
-0.000274658203125000,
9.15527343750000e-05,
-3.05175781250000e-05,
-9.15527343750000e-05,
0.000427246093750000,
0.000427246093750000,
-0.000152587890625000,
-0.000885009765625000,
-0.000640869140625000,
-0.000396728515625000,
-0.000427246093750000,
0.000396728515625000,
0.000701904296875000,
-0.000518798828125000,
-0.000305175781250000,
0.000427246093750000,
0.000366210937500000,
-0.000518798828125000,
-0.000457763671875000,
-0.000427246093750000,
0.000396728515625000,
-6.10351562500000e-05,
-0.000823974609375000,
-0.000366210937500000,
-0.000976562500000000,
-6.10351562500000e-05,
3.05175781250000e-05,
-0.000488281250000000,
-0.000244140625000000,
-6.10351562500000e-05,
-0.000305175781250000,
-9.15527343750000e-05,
0.000518798828125000,
-0.000488281250000000,
-0.000518798828125000,
0.000335693359375000,
0.000274658203125000,
0.000183105468750000,
0,
-0.000305175781250000,
0.000274658203125000,
0.000274658203125000,
-0.000579833984375000,
-0.000610351562500000,
0.000579833984375000,
0.00119018554687500,
0.00103759765625000,
-6.10351562500000e-05,
-3.05175781250000e-05,
0.000183105468750000,
0.000305175781250000,
0.000244140625000000,
0.000335693359375000,
0.000457763671875000,
0.000122070312500000,
0.000183105468750000,
-9.15527343750000e-05,
0.000274658203125000,
3.05175781250000e-05,
0.000335693359375000,
3.05175781250000e-05,
3.05175781250000e-05,
0.000640869140625000,
3.05175781250000e-05,
-0.000427246093750000,
-0.000335693359375000,
0.000335693359375000,
0,
-3.05175781250000e-05,
-3.05175781250000e-05,
0.000305175781250000};*/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0


// change this to make the song slower or faster
int tempo = 114;

// change this to whichever pin you want to use
int buzzer = 9;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody[] = {



  NOTE_D5,-4, NOTE_E5,-4, NOTE_A4,4, //1
  NOTE_E5,-4, NOTE_FS5,-4, NOTE_A5,16, NOTE_G5,16, NOTE_FS5,8,
  NOTE_D5,-4, NOTE_E5,-4, NOTE_A4,2,
  NOTE_A4,16, NOTE_A4,16, NOTE_B4,16, NOTE_D5,8, NOTE_D5,16,
  NOTE_D5,-4, NOTE_E5,-4, NOTE_A4,4, //repeat from 1
  NOTE_E5,-4, NOTE_FS5,-4, NOTE_A5,16, NOTE_G5,16, NOTE_FS5,8,
  NOTE_D5,-4, NOTE_E5,-4, NOTE_A4,2,
  NOTE_A4,16, NOTE_A4,16, NOTE_B4,16, NOTE_D5,8, NOTE_D5,16,
  REST,4, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_D5,8, NOTE_E5,8, NOTE_CS5,-8,
  NOTE_B4,16, NOTE_A4,2, REST,4, 

  REST,8, NOTE_B4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,4, NOTE_A4,8, //7
  NOTE_A5,8, REST,8, NOTE_A5,8, NOTE_E5,-4, REST,4, 
  NOTE_B4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, NOTE_D5,8, NOTE_E5,8, REST,8,
  REST,8, NOTE_CS5,8, NOTE_B4,8, NOTE_A4,-4, REST,4,
  REST,8, NOTE_B4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, NOTE_A4,4,
  NOTE_E5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,4, REST,4,
   
  NOTE_D5,2, NOTE_E5,8, NOTE_FS5,8, NOTE_D5,8, //13
  NOTE_E5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,4, NOTE_A4,4,
  REST,2, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8,
  REST,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,

  NOTE_E5,-8, NOTE_E5,-8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,-8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //18
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,8, NOTE_A4,8, NOTE_A4,8, 
  NOTE_E5,4, NOTE_D5,2, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_A5,4, NOTE_CS5,8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,

  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,4, NOTE_A4,8,  //23
  NOTE_E5,4, NOTE_D5,2, REST,4,
  REST,8, NOTE_B4,8, NOTE_D5,8, NOTE_B4,8, NOTE_D5,8, NOTE_E5,4, REST,8,
  REST,8, NOTE_CS5,8, NOTE_B4,8, NOTE_A4,-4, REST,4,
  REST,8, NOTE_B4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, NOTE_A4,4,
  REST,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8, NOTE_D5,8,
  
  REST,8, NOTE_A4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, //29
  REST,8, NOTE_CS5,8, NOTE_B4,8, NOTE_A4,-4, REST,4,
  NOTE_B4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, NOTE_A4,4, REST,8,
  REST,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,4, NOTE_E5,-4, 
  NOTE_D5,2, NOTE_D5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,4, 
  NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8, NOTE_A4,8, NOTE_A4,4,

  REST,-4, NOTE_A4,8, NOTE_B4,8, NOTE_CS5,8, NOTE_D5,8, NOTE_B4,8, //35
  REST,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_E5,-8, NOTE_E5,-8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,4, NOTE_A4,8, 

   NOTE_E5,4, NOTE_D5,2, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //40
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_A5,4, NOTE_CS5,8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,4, NOTE_A4,8,  
  NOTE_E5,4, NOTE_D5,2, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
   
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //45
  NOTE_A5,4, NOTE_CS5,8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,4, NOTE_A4,8,  
  NOTE_E5,4, NOTE_D5,2, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //45
  
  NOTE_A5,4, NOTE_CS5,8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,4, NOTE_A4,8, 

  NOTE_E5,4, NOTE_D5,2, REST,4
};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;

void sunet() {
  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration * 0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
}


void setup()
 {

  pinMode(7, INPUT); //senzor de miscare 1
  pinMode(6,INPUT);//senzor de miscare 2
  pinMode(13,OUTPUT);
  pinMode (SPEAKER_PIN, OUTPUT);
  delay (500);
  Serial.begin(9600);
  Serial.println("Start");
}

void loop() 
{
  if (digitalRead(7)== HIGH || digitalRead(6)== HIGH)//senzorul detecteaza miscare
  { 
    //AU_VENIT_HOTII();
    sunet();
    Serial.println("S-a detectat miscare. Se porneste alarma");
    delay(50);
    
  }
  digitalWrite(13,LOW);
  delay(20);
  //Serial.println("loop");
}


void AU_VENIT_HOTII() {
  /*tmrpcm.speakerPin = SPEAKER_PIN; //pin difuzor
  Serial.begin(9600);
 
  tmrpcm.setVolume (5);
  tmrpcm.play("sirena-politie.wav");//sunet de pe card*/
  digitalWrite(13,HIGH);
  tone(SPEAKER_PIN,440,250);delay (250);
  tone(SPEAKER_PIN,330,250);delay (250);
  tone(SPEAKER_PIN,440,250);delay (250);
  tone(SPEAKER_PIN,330,250);delay (250);

  tone(SPEAKER_PIN,440,250);delay (250);
  tone(SPEAKER_PIN,330,250);delay (250);
  tone(SPEAKER_PIN,440,250);delay (250);
  tone(SPEAKER_PIN,330,250);delay (250);

  noTone(SPEAKER_PIN);
  


}

/*
void sunet()
{
  digitalWrite(13,HIGH);
  //setVol(100);
  for(int i=0;i<200;i++)
  {
    tone(SPEAKER_PIN,v[i]*1000000,250);delay (250);
  }
  noTone(SPEAKER_PIN);
}
*/








